cmake_minimum_required (VERSION 3.9)
project (libFreeRTOS C)

include(crossconfig.cmake OPTIONAL)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release CACHE STRING
		"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
		FORCE)
endif(NOT CMAKE_BUILD_TYPE)

set(LIBNAME "FreeRTOS")

include(CMake/MicroprocessorSpecific.cmake)
include(CMake/FreeRTOSConfig.cmake)
include(CMake/FreeRTOSConfigDependencies.cmake)

#configure_file(lib/include/aws_crypto.h include/aws_crypto.h COPYONLY)
#configure_file(lib/include/aws_greengrass_discovery.h include/aws_greengrass_discovery.h COPYONLY)
#configure_file(lib/include/aws_mqtt_agent.h include/aws_mqtt_agent.h COPYONLY)
#configure_file(lib/include/aws_mqtt_lib.h include/aws_mqtt_lib.h COPYONLY)
#configure_file(lib/include/aws_pkcs11.h include/aws_pkcs11.h COPYONLY)
#configure_file(lib/include/aws_secure_sockets.h include/aws_secure_sockets.h COPYONLY)
#configure_file(lib/include/aws_shadow.h include/aws_shadow.h COPYONLY)
#configure_file(lib/include/aws_system_init.h include/aws_system_init.h COPYONLY)
#configure_file(lib/include/aws_tls.h include/aws_tls.h COPYONLY)
#configure_file(lib/include/aws_ts_ota_agent.h include/aws_ts_ota_agent.h COPYONLY)
#configure_file(lib/include/aws_wifi.h include/aws_wifi.h COPYONLY)
#configure_file(lib/include/private/aws_bufferpool.h include/private/aws_bufferpool.h COPYONLY)
#configure_file(lib/include/private/aws_default_root_certificates.h include/private/aws_default_root_certificates.h COPYONLY)
#configure_file(lib/include/private/aws_doubly_linked_list.h include/private/aws_doubly_linked_list.h COPYONLY)
#configure_file(lib/include/private/aws_ggd_config_defaults.h include/private/aws_ggd_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_greengrass_lib_private.c include/private/aws_greengrass_lib_private.c COPYONLY)
#configure_file(lib/include/private/aws_greengrass_lib_private.h include/private/aws_greengrass_lib_private.h COPYONLY)
#configure_file(lib/include/private/aws_helper_secure_connect.h include/private/aws_helper_secure_connect.h COPYONLY)
#configure_file(lib/include/private/aws_lib_init.h include/private/aws_lib_init.h COPYONLY)
#configure_file(lib/include/private/aws_mqtt_agent_config_defaults.h include/private/aws_mqtt_agent_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_mqtt_buffer.h include/private/aws_mqtt_buffer.h COPYONLY)
#configure_file(lib/include/private/aws_mqtt_config_defaults.h include/private/aws_mqtt_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_mqtt_lib_private.c include/private/aws_mqtt_lib_private.c COPYONLY)
#configure_file(lib/include/private/aws_mqtt_lib_private.h include/private/aws_mqtt_lib_private.h COPYONLY)
#configure_file(lib/include/private/aws_ota_cbor.h include/private/aws_ota_cbor.h COPYONLY)
#configure_file(lib/include/private/aws_rsprintf.h include/private/aws_rsprintf.h COPYONLY)
#configure_file(lib/include/private/aws_secure_sockets_config_defaults.h include/private/aws_secure_sockets_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_shadow_config_defaults.h include/private/aws_shadow_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_shadow_json.h include/private/aws_shadow_json.h COPYONLY)
#configure_file(lib/include/private/aws_ts_ota_pal.h include/private/aws_ts_ota_pal.h COPYONLY)
#configure_file(lib/include/private/aws_ts_ota_types.h include/private/aws_ts_ota_types.h COPYONLY)

configure_file(CMake/FreeRTOSConfig.h.in FreeRTOSConfig.h @ONLY)
configure_file(CMake/FreeRTOS_uc.h.in FreeRTOS_uc.h @ONLY)
configure_file(CMake/FreeRTOSExternProvided.h.in FreeRTOSExternProvided.h @ONLY)

set(INSTALL_HEADERS ${INSTALL_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/FreeRTOSConfig.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/FreeRTOS_uc.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/FreeRTOSExternProvided.h)
#set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/message_buffer.h)
#set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/stream_buffer.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/FreeRTOS.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/task.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/deprecated_definitions.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/list.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/mpu_wrappers.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/portable.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/projdefs.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/stack_macros.h)

include_directories(${CMAKE_CURRENT_BINARY_DIR} lib/include lib/include/private)

option(Compile_Queue "Compile queue.c" OFF)
option(Compile_Timers "Compile timers.c" OFF)
option(Compile_EventGroups "Compile event_groups.c" OFF)
set (Compile_Heap_Model "1" CACHE STRING "Compile heapx.c, set to 0 for your own memory allocation")

if (Compile_Queue)
	set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/queue.c)
	set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/queue.h)
	set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/semphr.h)
endif (Compile_Queue)

if (Compile_Timers)
	set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/timers.c)
	set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/timers.h)
endif (Compile_Timers)

if (Compile_EventGroups)
	set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/event_groups.c)
	set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/event_groups.h)
endif (Compile_EventGroups)

if (Compile_Heap_Model STREQUAL "1")
	set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/portable/MemMang/heap_1.c)
elseif (Compile_Heap_Model STREQUAL "2")
	set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/portable/MemMang/heap_2.c)
elseif (Compile_Heap_Model STREQUAL "3")
	set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/portable/MemMang/heap_3.c)
elseif (Compile_Heap_Model STREQUAL "4")
	set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/portable/MemMang/heap_4.c)
elseif (Compile_Heap_Model STREQUAL "5")
	set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/portable/MemMang/heap_5.c)
endif (Compile_Heap_Model STREQUAL "1")

set(MANDATORY_SOURCE_FILES lib/FreeRTOS/tasks.c lib/FreeRTOS/list.c)

add_library(${LIBNAME} ${MANDATORY_SOURCE_FILES} ${OPTIONAL_SOURCE_FILES})

include(CheckIPOSupported)
check_ipo_supported(RESULT result)
if(result)
	set_property(TARGET ${LIBNAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION True)
endif()

add_definitions(-Wall -Wextra -Wmissing-prototypes -Wstrict-prototypes -c -std=gnu99)

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -gdwarf-2")
endif (CMAKE_BUILD_TYPE STREQUAL "Debug")

install(TARGETS ${LIBNAME} DESTINATION lib)
install(FILES ${INSTALL_HEADERS} DESTINATION include)
install(FILES ${INSTALL_HEADERS_PRIV} DESTINATION include/private)
