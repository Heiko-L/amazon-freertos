cmake_minimum_required (VERSION 3.9)
PROJECT (libFreeRTOS C)

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(LIBNAME "FreeRTOS")

include(CheckIPOSupported)
check_ipo_supported(RESULT result)
if(result)
#  set_property(TARGET ${LIBNAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION True)
endif()

if(DEFINED MCU_LIB_PATH)
#install(TARGETS hd44780 ARCHIVE DESTINATION ${MCU_LIB_PATH}/lib)
#install(FILES ${incfiles} DESTINATION "${MCU_LIB_PATH}/include")
endif(DEFINED MCU_LIB_PATH)

if(CMAKE_SYSTEM_PROCESSOR STREQUAL "atmega88")
include_directories(lib/FreeRTOS/portable/GCC/AVR)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/FreeRTOS/portable/GCC/AVR/portmacro.h)
endif(CMAKE_SYSTEM_PROCESSOR STREQUAL "atmega88")

include(CMake/FreeRTOSConfig.cmake)
#include_directories(lib/include lib/include/private)
configure_file(CMake/FreeRTOSConfig.h.in FreeRTOSConfig.h @ONLY)
configure_file(CMake/FreeRTOSExternProvided.h.in FreeRTOSExternProvided.h @ONLY)

set(INSTALL_HEADERS ${INSTALL_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/FreeRTOSConfig.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/FreeRTOSExternProvided.h)

#configure_file(lib/include/aws_crypto.h include/aws_crypto.h COPYONLY)
#configure_file(lib/include/aws_greengrass_discovery.h include/aws_greengrass_discovery.h COPYONLY)
#configure_file(lib/include/aws_mqtt_agent.h include/aws_mqtt_agent.h COPYONLY)
#configure_file(lib/include/aws_mqtt_lib.h include/aws_mqtt_lib.h COPYONLY)
#configure_file(lib/include/aws_pkcs11.h include/aws_pkcs11.h COPYONLY)
#configure_file(lib/include/aws_secure_sockets.h include/aws_secure_sockets.h COPYONLY)
#configure_file(lib/include/aws_shadow.h include/aws_shadow.h COPYONLY)
#configure_file(lib/include/aws_system_init.h include/aws_system_init.h COPYONLY)
#configure_file(lib/include/aws_tls.h include/aws_tls.h COPYONLY)
#configure_file(lib/include/aws_ts_ota_agent.h include/aws_ts_ota_agent.h COPYONLY)
#configure_file(lib/include/aws_wifi.h include/aws_wifi.h COPYONLY)

set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/event_groups.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/FreeRTOS.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/message_buffer.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/queue.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/semphr.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/stream_buffer.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/task.h)
set(INSTALL_HEADERS ${INSTALL_HEADERS} lib/include/timers.h)

#configure_file(lib/include/private/aws_bufferpool.h include/private/aws_bufferpool.h COPYONLY)
#configure_file(lib/include/private/aws_default_root_certificates.h include/private/aws_default_root_certificates.h COPYONLY)
#configure_file(lib/include/private/aws_doubly_linked_list.h include/private/aws_doubly_linked_list.h COPYONLY)
#configure_file(lib/include/private/aws_ggd_config_defaults.h include/private/aws_ggd_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_greengrass_lib_private.c include/private/aws_greengrass_lib_private.c COPYONLY)
#configure_file(lib/include/private/aws_greengrass_lib_private.h include/private/aws_greengrass_lib_private.h COPYONLY)
#configure_file(lib/include/private/aws_helper_secure_connect.h include/private/aws_helper_secure_connect.h COPYONLY)
#configure_file(lib/include/private/aws_lib_init.h include/private/aws_lib_init.h COPYONLY)
#configure_file(lib/include/private/aws_mqtt_agent_config_defaults.h include/private/aws_mqtt_agent_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_mqtt_buffer.h include/private/aws_mqtt_buffer.h COPYONLY)
#configure_file(lib/include/private/aws_mqtt_config_defaults.h include/private/aws_mqtt_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_mqtt_lib_private.c include/private/aws_mqtt_lib_private.c COPYONLY)
#configure_file(lib/include/private/aws_mqtt_lib_private.h include/private/aws_mqtt_lib_private.h COPYONLY)
#configure_file(lib/include/private/aws_ota_cbor.h include/private/aws_ota_cbor.h COPYONLY)
#configure_file(lib/include/private/aws_rsprintf.h include/private/aws_rsprintf.h COPYONLY)
#configure_file(lib/include/private/aws_secure_sockets_config_defaults.h include/private/aws_secure_sockets_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_shadow_config_defaults.h include/private/aws_shadow_config_defaults.h COPYONLY)
#configure_file(lib/include/private/aws_shadow_json.h include/private/aws_shadow_json.h COPYONLY)
#configure_file(lib/include/private/aws_ts_ota_pal.h include/private/aws_ts_ota_pal.h COPYONLY)
#configure_file(lib/include/private/aws_ts_ota_types.h include/private/aws_ts_ota_types.h COPYONLY)

set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/deprecated_definitions.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/list.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/mpu_wrappers.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/portable.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/projdefs.h)
set(INSTALL_HEADERS_PRIV ${INSTALL_HEADERS_PRIV} lib/include/private/stack_macros.h)

include_directories(${CMAKE_CURRENT_BINARY_DIR} lib/include lib/include/private)

option(Compile_Queue "Compile queue.c" OFF)
option(Compile_Timers "Compile timers.c" OFF)

if (Compile_Queue)
set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/queue.c)
endif (Compile_Queue)

if (Compile_Timers)
set(OPTIONAL_SOURCE_FILES ${OPTIONAL_SOURCE_FILES} lib/FreeRTOS/timers.c)
set(Compile_Queue ON CACHE BOOL "" FORCE)
endif (Compile_Timers)

set(MANDATORY_SOURCE_FILES lib/FreeRTOS/tasks.c lib/FreeRTOS/list.c)

add_library(${LIBNAME} ${MANDATORY_SOURCE_FILES} ${OPTIONAL_SOURCE_FILES})

install(TARGETS ${LIBNAME} DESTINATION lib)
install(FILES ${INSTALL_HEADERS} DESTINATION include)
install(FILES ${INSTALL_HEADERS_PRIV} DESTINATION include/private)
