cmake_minimum_required (VERSION 3.9)
PROJECT (libFreeRTOS C)

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(LIBNAME "FreeRTOS")

include(CheckIPOSupported)
check_ipo_supported(RESULT result)
if(result)
#  set_property(TARGET ${LIBNAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION True)
endif()

if(DEFINED MCU_LIB_PATH)
install(TARGETS hd44780 ARCHIVE DESTINATION ${MCU_LIB_PATH}/lib)
install(FILES ${incfiles} DESTINATION "${MCU_LIB_PATH}/include")
endif(DEFINED MCU_LIB_PATH)

#
# config.h.in configuration follows
#

OPTION(configUSE_PREEMPTION "" ON)
if (configUSE_PREEMPTION)
set(configUSE_PREEMPTION_Value "1" CACHE INTERNAL "")
else (configUSE_PREEMPTION)
set(configUSE_PREEMPTION_Value "0" CACHE INTERNAL "")
endif(configUSE_PREEMPTION)

OPTION(configUSE_PORT_OPTIMISED_TASK_SELECTION "" OFF)
if (configUSE_PORT_OPTIMISED_TASK_SELECTION)
set(configUSE_PORT_OPTIMISED_TASK_SELECTION_Value "1" CACHE INTERNAL "")
else (configUSE_PORT_OPTIMISED_TASK_SELECTION)
set(configUSE_PORT_OPTIMISED_TASK_SELECTION_Value "0" CACHE INTERNAL "")
endif(configUSE_PORT_OPTIMISED_TASK_SELECTION)

OPTION(configUSE_TICKLESS_IDLE "" OFF)
if (configUSE_TICKLESS_IDLE)
set(configUSE_TICKLESS_IDLE_Value "1" CACHE INTERNAL "")
else (configUSE_TICKLESS_IDLE)
set(configUSE_TICKLESS_IDLE_Value "0" CACHE INTERNAL "")
endif(configUSE_TICKLESS_IDLE)

SET(configCPU_CLOCK_HZ "8000000" CACHE STRING "")
SET(configTICK_RATE_HZ "1000" CACHE STRING "")
SET(configMAX_PRIORITIES "3" CACHE STRING "")
SET(configMINIMAL_STACK_SIZE "85" CACHE STRING "")
SET(configMAX_TASK_NAME_LEN "1" CACHE STRING "")

OPTION(configUSE_16_BIT_TICKS "" ON)
if (configUSE_16_BIT_TICKS)
set(configUSE_16_BIT_TICKS_Value "1" CACHE INTERNAL "")
else (configUSE_16_BIT_TICKS)
set(configUSE_16_BIT_TICKS_Value "0" CACHE INTERNAL "")
endif(configUSE_16_BIT_TICKS)

OPTION(configIDLE_SHOULD_YIELD "" ON)
if (configIDLE_SHOULD_YIELD)
set(configIDLE_SHOULD_YIELD_Value "1" CACHE INTERNAL "")
else (configIDLE_SHOULD_YIELD)
set(configIDLE_SHOULD_YIELD_Value "0" CACHE INTERNAL "")
endif(configIDLE_SHOULD_YIELD)

OPTION(configUSE_TASK_NOTIFICATIONS "" OFF)
if (configUSE_TASK_NOTIFICATIONS)
set(configUSE_TASK_NOTIFICATIONS_Value "1" CACHE INTERNAL "")
else (configUSE_TASK_NOTIFICATIONS)
set(configUSE_TASK_NOTIFICATIONS_Value "0" CACHE INTERNAL "")
endif(configUSE_TASK_NOTIFICATIONS)

OPTION(configUSE_MUTEXES "" OFF)
if (configUSE_MUTEXES)
set(configUSE_MUTEXES_Value "1" CACHE INTERNAL "")
else (configUSE_MUTEXES)
set(configUSE_MUTEXES_Value "0" CACHE INTERNAL "")
endif(configUSE_MUTEXES)

OPTION(configUSE_RECURSIVE_MUTEXES "" OFF)
if (configUSE_RECURSIVE_MUTEXES)
set(configUSE_RECURSIVE_MUTEXES_Value "1" CACHE INTERNAL "")
else (configUSE_RECURSIVE_MUTEXES)
set(configUSE_RECURSIVE_MUTEXES_Value "0" CACHE INTERNAL "")
endif(configUSE_RECURSIVE_MUTEXES)

OPTION(configUSE_COUNTING_SEMAPHORES "" OFF)
if (configUSE_COUNTING_SEMAPHORES)
set(configUSE_COUNTING_SEMAPHORES_Value "1" CACHE INTERNAL "")
else (configUSE_COUNTING_SEMAPHORES)
set(configUSE_COUNTING_SEMAPHORES_Value "0" CACHE INTERNAL "")
endif(configUSE_COUNTING_SEMAPHORES)

SET(configQUEUE_REGISTRY_SIZE "0" CACHE STRING "")
OPTION(configUSE_QUEUE_SETS "" OFF)
if (configUSE_QUEUE_SETS)
set(configUSE_QUEUE_SETS_Value "1" CACHE INTERNAL "")
else (configUSE_QUEUE_SETS)
set(configUSE_QUEUE_SETS_Value "0" CACHE INTERNAL "")
endif(configUSE_QUEUE_SETS)

OPTION(configUSE_TIME_SLICING "" ON)
if (configUSE_TIME_SLICING)
set(configUSE_TIME_SLICING_Value "1" CACHE INTERNAL "")
else (configUSE_TIME_SLICING)
set(configUSE_TIME_SLICING_Value "0" CACHE INTERNAL "")
endif(configUSE_TIME_SLICING)

OPTION(configUSE_NEWLIB_REENTRANT "" OFF)
if (configUSE_NEWLIB_REENTRANT)
set(configUSE_NEWLIB_REENTRANT_Value "1" CACHE INTERNAL "")
else (configUSE_NEWLIB_REENTRANT)
set(configUSE_NEWLIB_REENTRANT_Value "0" CACHE INTERNAL "")
endif(configUSE_NEWLIB_REENTRANT)

OPTION(configENABLE_BACKWARD_COMPATIBILITY "" OFF)
if (configENABLE_BACKWARD_COMPATIBILITY)
set(configENABLE_BACKWARD_COMPATIBILITY_Value "1" CACHE INTERNAL "")
else (configENABLE_BACKWARD_COMPATIBILITY)
set(configENABLE_BACKWARD_COMPATIBILITY_Value "0" CACHE INTERNAL "")
endif(configENABLE_BACKWARD_COMPATIBILITY)

SET(configNUM_THREAD_LOCAL_STORAGE_POINTERS "0" CACHE STRING "")

OPTION(configSUPPORT_STATIC_ALLOCATION "" OFF)
if (configSUPPORT_STATIC_ALLOCATION)
set(configSUPPORT_STATIC_ALLOCATION_Value "1" CACHE INTERNAL "")
else (configSUPPORT_STATIC_ALLOCATION)
set(configSUPPORT_STATIC_ALLOCATION_Value "0" CACHE INTERNAL "")
endif(configSUPPORT_STATIC_ALLOCATION)

OPTION(configSUPPORT_DYNAMIC_ALLOCATION "" ON)
if (configSUPPORT_DYNAMIC_ALLOCATION)
set(configSUPPORT_DYNAMIC_ALLOCATION_Value "1" CACHE INTERNAL "")
else (configSUPPORT_DYNAMIC_ALLOCATION)
set(configSUPPORT_DYNAMIC_ALLOCATION_Value "0" CACHE INTERNAL "")
endif(configSUPPORT_DYNAMIC_ALLOCATION)

SET(configTOTAL_HEAP_SIZE "512" CACHE STRING "")
OPTION(configAPPLICATION_ALLOCATED_HEAP "" OFF)
if (configAPPLICATION_ALLOCATED_HEAP)
set(configAPPLICATION_ALLOCATED_HEAP_Value "1" CACHE INTERNAL "")
else (configAPPLICATION_ALLOCATED_HEAP)
set(configAPPLICATION_ALLOCATED_HEAP_Value "0" CACHE INTERNAL "")
endif(configAPPLICATION_ALLOCATED_HEAP)

OPTION(configUSE_IDLE_HOOK "" OFF)
if (configUSE_IDLE_HOOK)
set(configUSE_IDLE_HOOK_Value "1" CACHE INTERNAL "")
else (configUSE_IDLE_HOOK)
set(configUSE_IDLE_HOOK_Value "0" CACHE INTERNAL "")
endif(configUSE_IDLE_HOOK)

OPTION(configUSE_TICK_HOOK "" OFF)
if (configUSE_TICK_HOOK)
set(configUSE_TICK_HOOK_Value "1" CACHE INTERNAL "")
else (configUSE_TICK_HOOK)
set(configUSE_TICK_HOOK_Value "0" CACHE INTERNAL "")
endif(configUSE_TICK_HOOK)

SET(configCHECK_FOR_STACK_OVERFLOW "2" CACHE STRING "")
if (configCHECK_FOR_STACK_OVERFLOW GREATER 0)
set(CMAKE_STACK_OVERFLOW_HOOK "extern void vApplicationStackOverflowHook( TaskHandle_t xTask, signed char *pcTaskName );" CACHE INTERNAL "")
endif (configCHECK_FOR_STACK_OVERFLOW GREATER 0)

OPTION(configUSE_MALLOC_FAILED_HOOK "" OFF)
if (configUSE_MALLOC_FAILED_HOOK)
set(configUSE_MALLOC_FAILED_HOOK_Value "1" CACHE INTERNAL "")
else (configUSE_MALLOC_FAILED_HOOK)
set(configUSE_MALLOC_FAILED_HOOK_Value "0" CACHE INTERNAL "")
endif(configUSE_MALLOC_FAILED_HOOK)

OPTION(configUSE_DAEMON_TASK_STARTUP_HOOK "" OFF)
if (configUSE_DAEMON_TASK_STARTUP_HOOK)
set(configUSE_DAEMON_TASK_STARTUP_HOOK_Value "1" CACHE INTERNAL "")
else (configUSE_DAEMON_TASK_STARTUP_HOOK)
set(configUSE_DAEMON_TASK_STARTUP_HOOK_Value "0" CACHE INTERNAL "")
endif(configUSE_DAEMON_TASK_STARTUP_HOOK)

OPTION(configGENERATE_RUN_TIME_STATS "" OFF)
OPTION(configUSE_TRACE_FACILITY "" OFF)
OPTION(configUSE_STATS_FORMATTING_FUNCTIONS "" OFF)

OPTION(configUSE_CO_ROUTINES "" OFF)
SET(configMAX_CO_ROUTINE_PRIORITIES "0" CACHE STRING "")

OPTION(configUSE_TIMERS "" OFF)
SET(configTIMER_TASK_PRIORITY "0" CACHE STRING "")
SET(configTIMER_QUEUE_LENGTH "0" CACHE STRING "")
SET(configTIMER_TASK_STACK_DEPTH "0" CACHE STRING "")

SET(configKERNEL_INTERRUPT_PRIORITY "0" CACHE STRING "")
SET(configMAX_SYSCALL_INTERRUPT_PRIORITY "0" CACHE STRING "")
SET(configMAX_API_CALL_INTERRUPT_PRIORITY "0" CACHE STRING "")

OPTION(configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS "" OFF)

OPTION(INCLUDE_vTaskPrioritySet "" OFF)
OPTION(INCLUDE_uxTaskPriorityGet "" OFF)
OPTION(INCLUDE_vTaskDelete "" OFF)
OPTION(INCLUDE_vTaskSuspend "" ON)
OPTION(INCLUDE_xResumeFromISR "" ON)
OPTION(INCLUDE_vTaskDelayUntil "" OFF)
OPTION(INCLUDE_vTaskDelay "" ON)
OPTION(INCLUDE_xTaskGetSchedulerState "" OFF)
OPTION(INCLUDE_xTaskGetCurrentTaskHandle "" OFF)
OPTION(INCLUDE_uxTaskGetStackHighWaterMark "" ON)
OPTION(INCLUDE_xTaskGetIdleTaskHandle "" OFF)
OPTION(INCLUDE_eTaskGetState "" OFF)
OPTION(INCLUDE_xEventGroupSetBitFromISR "" OFF)
OPTION(INCLUDE_xTimerPendFunctionCall "" OFF)
OPTION(INCLUDE_xTaskAbortDelay "" OFF)
OPTION(INCLUDE_xTaskGetHandle "" OFF)
OPTION(INCLUDE_xTaskResumeFromISR "" OFF)

configure_file(CMake/config.h.in foo.h @ONLY)

